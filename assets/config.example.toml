# GitAI 配置文件示例
# 版本: 1.0.0
# 文档: https://github.com/nehcuh/gitai/docs

# ============================================================================
# AI 服务配置
# ============================================================================
[ai]
# AI 服务 API 端点
api_url = "http://localhost:11434/v1/chat/completions"

# 使用的 AI 模型名称
model_name = "qwen2.5:7b"

# API 密钥（可选，某些服务需要）
api_key = ""

# 生成温度 (0.0-1.0)
# 较低值生成更确定的结果，较高值生成更多样化的结果
temperature = 0.7

# 最大生成令牌数
max_tokens = 2048

# 请求超时时间（秒）
timeout = 30

# 最大重试次数
max_retries = 3

# 重试间隔（秒）
retry_delay = 2

# 启用流式响应
stream = false

# 系统提示词
system_prompt = """
你是一个专业的代码助手，请根据代码变更生成简洁、准确的提交消息。
提交消息应该遵循 Conventional Commits 规范。
"""

# ============================================================================
# TreeSitter 语法分析配置
# ============================================================================
[tree_sitter]
# 是否启用语法树分析功能（默认关闭）
enabled = true

# 是否启用缓存
cache_enabled = true

# 支持的语言列表
languages = ["rust", "javascript", "python", "go", "java", "c", "cpp"]

# ============================================================================
# DevOps 平台集成配置
# ============================================================================
[account]
# 平台类型: "coding", "jira", "azure-devops", "github"
devops_platform = "coding"

# DevOps 实例 URL
base_url = "https://your-devops-instance.com"

# 个人访问令牌
token = "YOUR_DEVOPS_API_TOKEN"

# API 请求超时时间（毫秒）
timeout = 30000

# API 请求重试次数
retry_count = 3

# ============================================================================
# 代码评审配置
# ============================================================================
[review]
# 自动保存评审结果
auto_save = true

# 评审结果存储路径
storage_path = "~/.gitai/review_results"

# 输出格式: "markdown", "json", "text"
format = "markdown"

# 评审结果保留时间（小时）
max_age_hours = 168

# 是否在提交时包含评审结果
include_in_commit = true

# ============================================================================
# 代码扫描配置
# ============================================================================
[scan]
# 扫描结果存储路径
results_path = "~/.gitai/scan-results"

# 默认扫描工具 (semgrep|codeql|both)
default_tool = "semgrep"

# 是否在扫描失败时回退到其他工具
fallback_enabled = true

# 扫描超时时间（秒）
timeout = 300

# ============================================================================
# Semgrep 配置
# ============================================================================
[scan.semgrep]
# 是否启用 Semgrep 扫描
enabled = true

# 规则目录路径
rules_path = "~/.cache/gitai/semgrep"

# 扫描深度 (basic|medium|deep)
depth = "medium"

# 并发扫描数量
concurrency = 4

# 排除的文件模式
exclude_patterns = ["*.test.*", "*/tests/*", "*/node_modules/*"]

# ============================================================================
# CodeQL 配置
# ============================================================================
[scan.codeql]
# 是否启用 CodeQL 扫描
enabled = true

# 标准库路径
standard_library_path = "~/.cache/gitai/codeql"

# 数据库创建超时（分钟）
database_timeout = 30

# 查询超时（分钟）
query_timeout = 15

# 是否只运行安全查询
security_only = true

# 内存限制（MB）
memory_limit = 2048

# ============================================================================
# MCP 服务配置
# ============================================================================
[mcp]
# 服务器端口
server_port = 8080

# 绑定地址
server_host = "localhost"

# 最大连接数
max_connections = 1000

# 连接超时（秒）
connection_timeout = 30

# 请求超时（秒）
request_timeout = 60

# 启用的服务
enabled_services = [
    "tree_sitter",
    "ai_analysis", 
    "devops_integration"
]


# ============================================================================
# 日志配置
# ============================================================================
[logging]
# 日志级别: "trace", "debug", "info", "warn", "error"
level = "info"

# 日志格式: "text", "json", "pretty"
format = "text"

# 输出文件（空表示输出到控制台）
file = ""

# 日志轮转: "daily", "hourly", "size"
rotation = "daily"

# 最大日志文件大小
max_size = "100MB"

# 保留日志文件数量
max_files = 10

# ============================================================================
# 性能配置
# ============================================================================
[performance]
# 最大并发请求数
max_concurrent_requests = 100

# 连接池大小
connection_pool_size = 50

# 请求超时（秒）
request_timeout = 30

# 工作线程数
worker_threads = 8

# 缓存配置
cache_size = "512MB"
cache_ttl = 3600

# 内存限制
memory_limit = "2GB"
