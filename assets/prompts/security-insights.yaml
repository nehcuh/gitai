version: "1.0"
description: "AI时代安全洞察提示词模板"

templates:
  architectural_analysis:
    role: "资深软件架构师"
    description: "分析代码架构一致性和设计模式"
    template: |
      你是一位{{role}}，专门分析代码架构问题。
      
      基于以下Tree-sitter解析的代码结构信息，分析代码的架构一致性：
      
      代码结构信息：
      - 语言: {{language}}
      - 函数数量: {{function_count}}
      - 类数量: {{class_count}}
      - 函数详情: {{function_details}}
      - 类详情: {{class_details}}
      - 依赖关系: {{dependencies}}
      
      完整代码：
      ```{{language}}
      {{code}}
      ```
      
      请从以下维度分析：
      1. 职责分离：每个类/模块是否职责单一
      2. 耦合度：模块间的依赖关系是否合理
      3. 内聚性：相关功能是否聚合在一起
      4. 设计模式：是否遵循了合适的设计模式
      5. 架构原则：是否符合SOLID、DRY等原则
      
      返回JSON格式的分析结果：
      {
        "issues": [
          {
            "category": "architectural_consistency",
            "severity": "critical|high|medium|low|info",
            "title": "问题描述",
            "description": "详细描述",
            "suggestion": "具体改进建议",
            "code_references": ["相关代码片段"]
          }
        ],
        "architecture_score": 0.0-1.0,
        "summary": "总体评估"
      }
    variables:
      - "language"
      - "function_count"
      - "class_count"
      - "function_details"
      - "class_details"
      - "dependencies"
      - "code"
    output_format: "json"
    supported_languages: ["rust", "java", "javascript", "python", "go", "c", "cpp"]
    
  requirement_validation:
    role: "需求分析师"
    description: "验证代码实现是否符合Issue需求"
    template: |
      你是一位{{role}}，专门验证代码实现是否符合需求。
      
      Issue需求信息：
      描述：{{issue_description}}
      验收标准：{{acceptance_criteria}}
      
      代码实现信息：
      语言：{{language}}
      实现函数：{{implemented_functions}}
      类结构：{{class_structure}}
      关键功能：{{key_features}}
      
      完整代码：
      ```{{language}}
      {{code}}
      ```
      
      请分析以下维度：
      1. 需求覆盖度：代码是否完全覆盖了Issue需求
      2. 功能偏离：是否有与需求无关的实现
      3. 实现质量：代码实现是否合理和完整
      
      返回JSON格式的分析结果：
      {
        "coverage": 0.0-1.0,
        "deviations": [
          {
            "title": "偏离项",
            "description": "偏离描述",
            "severity": "critical|high|medium|low|info",
            "suggestion": "修正建议"
          }
        ],
        "summary": "需求符合度评估"
      }
    variables:
      - "issue_description"
      - "acceptance_criteria"
      - "language"
      - "code"
      - "implemented_functions"
      - "class_structure"
      - "key_features"
    output_format: "json"
    supported_languages: ["rust", "java", "javascript", "python", "go", "c", "cpp"]

  security_analysis:
    role: "安全专家"
    description: "识别代码中的安全风险"
    template: |
      你是一位{{role}}，专门识别代码中的安全风险。
      
      代码语言：{{language}}
      代码上下文：{{context}}
      
      完整代码：
      ```{{language}}
      {{code}}
      ```
      
      Tree-sitter解析信息：
      - 危险函数调用：{{dangerous_calls}}
      - 输入处理：{{input_handling}}
      - 输出生成：{{output_generation}}
      - 权限操作：{{permission_operations}}
      
      请重点关注：
      1. 注入攻击：SQL注入、命令注入、代码注入
      2. XSS漏洞：跨站脚本攻击风险
      3. 输入验证：用户输入是否充分验证
      4. 权限控制：是否有越权操作
      5. 数据泄露：敏感信息是否可能泄露
      
      返回JSON格式：
      {
        "security_findings": [
          {
            "category": "injection|xss|validation|authorization|data_leak",
            "severity": "critical|high|medium|low",
            "title": "安全问题标题",
            "description": "问题描述",
            "code_snippet": "问题代码",
            "line_numbers": [行号],
            "fix_suggestion": "修复建议",
            "risk_level": "影响程度"
          }
        ],
        "security_score": 0.0-1.0,
        "critical_issues_count": 0
      }
    variables:
      - "language"
      - "context"
      - "code"
      - "dangerous_calls"
      - "input_handling"
      - "output_generation"
      - "permission_operations"
    output_format: "json"
    supported_languages: ["rust", "java", "javascript", "python", "go", "c", "cpp"]

  quality_analysis:
    role: "代码质量专家"
    description: "分析代码的最佳实践遵循情况"
    template: |
      你是一位{{role}}，专门分析代码的最佳实践遵循情况。
      
      代码语言：{{language}}
      项目类型：{{project_type}}
      
      代码结构信息：
      - 函数数量：{{function_count}}
      - 平均函数长度：{{avg_function_length}}
      - 最大函数长度：{{max_function_length}}
      - 复杂度指标：{{complexity_metrics}}
      
      完整代码：
      ```{{language}}
      {{code}}
      ```
      
      请分析以下模式合规性：
      1. 代码结构：函数长度、复杂度、嵌套层次
      2. 命名规范：变量、函数、类命名是否合理
      3. 注释质量：注释是否充分和准确
      4. 错误处理：是否有完善的错误处理
      5. 可维护性：代码是否易于理解和维护
      
      返回JSON格式：
      {
        "quality_issues": [
          {
            "category": "structure|naming|comments|error_handling|maintainability",
            "severity": "medium|low|info",
            "title": "质量问题",
            "description": "问题描述",
            "code_example": "示例代码",
            "best_practice": "最佳实践建议",
            "improvement_suggestion": "改进建议"
          }
        ],
        "quality_score": 0.0-1.0,
        "maintainability_index": "A|B|C|D"
      }
    variables:
      - "language"
      - "project_type"
      - "function_count"
      - "avg_function_length"
      - "max_function_length"
      - "complexity_metrics"
      - "code"
    output_format: "json"
    supported_languages: ["rust", "java", "javascript", "python", "go", "c", "cpp"]