# Custom AST-Grep Rules Configuration
# This file defines custom code analysis rules for various programming languages
# Rules are organized by language and category for better maintainability

version: "1.0"
metadata:
  name: "GitAI Custom Rules"
  description: "Enhanced code quality and security rules for ast-grep"
  author: "GitAI Team"
  created: "2024-12-30"

# Global settings
settings:
  # Default severity levels: error, warning, info, hint
  default_severity: "warning"
  # Enable/disable all rules globally
  enabled: true
  # Categories to enable/disable
  categories:
    security: true
    code_quality: true
    performance: true
    best_practice: true
    style: true

# Language-specific rules
languages:
  # Rust Rules
  rust:
    rules:
      - id: "rust-avoid-unwrap"
        name: "Avoid dangerous unwrap() calls"
        description: "Using unwrap() can cause runtime panics. Consider using expect() with meaningful messages or proper error handling."
        category: "bug_risk"
        severity: "warning"
        pattern: "$VAR.unwrap()"
        message: "Avoid unwrap(); use expect() or proper error handling"
        suggestion: "Replace with .expect(\"meaningful message\") or handle with match/if let"
        examples:
          bad: |
            let value = some_option.unwrap();
          good: |
            let value = some_option.expect("Expected some_option to have a value");
            // or
            let value = match some_option {
                Some(v) => v,
                None => return Err("Missing value".into()),
            };
        enabled: true

      - id: "rust-todo-macro"
        name: "TODO macro usage"
        description: "TODO macros indicate unfinished implementation and should be resolved before production."
        category: "code_quality"
        severity: "info"
        pattern: "todo!($MSG)"
        message: "TODO macro found - implementation needed"
        suggestion: "Complete the implementation or use a more specific error type"
        enabled: true

      - id: "rust-clone-on-copy"
        name: "Unnecessary clone on Copy types"
        description: "Clone is unnecessary for types that implement Copy trait."
        category: "performance"
        severity: "hint"
        pattern: "$NUM.clone()"
        message: "Unnecessary clone() on Copy type"
        suggestion: "Remove .clone() call for Copy types like integers, booleans, chars"
        enabled: true

      - id: "rust-expect-empty-message"
        name: "Empty expect message"
        description: "expect() calls should have meaningful error messages."
        category: "code_quality"
        severity: "warning"
        pattern: "$VAR.expect(\"\")"
        message: "expect() should have a meaningful error message"
        suggestion: "Provide a descriptive error message explaining what went wrong"
        enabled: true

      - id: "rust-dbg-macro"
        name: "Debug macro in production"
        description: "dbg! macro calls should be removed from production code."
        category: "code_quality"
        severity: "warning"
        pattern: "dbg!($EXPR)"
        message: "Remove dbg! macro from production code"
        suggestion: "Use proper logging or remove debug statements"
        enabled: true

  # Python Rules
  python:
    rules:
      - id: "python-print-statement"
        name: "Print statement usage"
        description: "Print statements should be replaced with proper logging for better control and formatting."
        category: "best_practice"
        severity: "info"
        pattern: "print($ARGS)"
        message: "Consider using logging instead of print statements"
        suggestion: "Use logging.info(), logging.debug(), logging.warning(), or logging.error()"
        examples:
          bad: |
            print("User logged in:", username)
          good: |
            import logging
            logger = logging.getLogger(__name__)
            logger.info("User logged in: %s", username)
        enabled: true

      - id: "python-sql-injection"
        name: "SQL injection vulnerability"
        description: "Direct string formatting in SQL queries can lead to SQL injection attacks."
        category: "security"
        severity: "error"
        pattern: "execute($SQL)"
        message: "Potential SQL injection vulnerability"
        suggestion: "Use parameterized queries or prepared statements"
        examples:
          bad: |
            cursor.execute(f"SELECT * FROM users WHERE name = '{user_input}'")
          good: |
            cursor.execute("SELECT * FROM users WHERE name = ?", (user_input,))
        enabled: true

      - id: "python-eval-usage"
        name: "Dangerous eval() usage"
        description: "eval() can execute arbitrary code and poses security risks."
        category: "security"
        severity: "error"
        pattern: "eval($EXPR)"
        message: "Avoid using eval() - security risk"
        suggestion: "Use ast.literal_eval() for safe evaluation or find alternative approaches"
        enabled: true

      - id: "python-except-bare"
        name: "Bare except clause"
        description: "Bare except clauses can hide important errors and make debugging difficult."
        category: "code_quality"
        severity: "warning"
        pattern: |
          try:
            $BODY
          except:
            $HANDLER
        message: "Avoid bare except clauses"
        suggestion: "Specify the exception type or use 'except Exception:' as minimum"
        enabled: true

  # JavaScript/TypeScript Rules
  javascript:
    rules:
      - id: "js-console-log"
        name: "Console.log in production"
        description: "Console.log statements should not appear in production code."
        category: "code_quality"
        severity: "warning"
        pattern: "console.log($ARGS)"
        message: "Remove console.log from production code"
        suggestion: "Use proper logging framework or remove debug statements"
        enabled: true

      - id: "js-strict-equality"
        name: "Use strict equality"
        description: "Use === and !== for type-safe comparisons instead of == and !=."
        category: "best_practice"
        severity: "warning"
        pattern: "$A == $B"
        message: "Use === for strict equality comparison"
        suggestion: "Replace == with === and != with !== for type-safe comparison"
        examples:
          bad: |
            if (value == null) { /* ... */ }
          good: |
            if (value === null) { /* ... */ }
        enabled: true

      - id: "js-xss-innerhtml"
        name: "XSS via innerHTML"
        description: "Setting innerHTML with unsanitized user input can lead to XSS vulnerabilities."
        category: "security"
        severity: "error"
        pattern: "$ELEM.innerHTML = $VAR"
        message: "Potential XSS vulnerability via innerHTML"
        suggestion: "Use textContent for plain text or properly sanitize input before setting innerHTML"
        examples:
          bad: |
            element.innerHTML = userInput;
          good: |
            element.textContent = userInput;
            // or with sanitization
            element.innerHTML = DOMPurify.sanitize(userInput);
        enabled: true

      - id: "js-var-declaration"
        name: "var declaration"
        description: "Use let or const instead of var for better scoping."
        category: "best_practice"
        severity: "info"
        pattern: "var $VAR = $VALUE"
        message: "Use let or const instead of var"
        suggestion: "Replace var with let for mutable variables or const for immutable ones"
        enabled: true

      - id: "js-alert-usage"
        name: "Alert usage"
        description: "Alert dialogs provide poor user experience and should be avoided."
        category: "code_quality"
        severity: "warning"
        pattern: "alert($MSG)"
        message: "Avoid using alert() - poor user experience"
        suggestion: "Use custom modals, toast notifications, or proper UI feedback"
        enabled: true

  # TypeScript Rules (inherits JavaScript rules plus additional ones)
  typescript:
    inherit_from: "javascript"
    rules:
      - id: "ts-any-type"
        name: "any type usage"
        description: "The 'any' type defeats the purpose of TypeScript's type safety."
        category: "code_quality"
        severity: "warning"
        pattern: ": any"
        message: "Avoid using 'any' type"
        suggestion: "Use specific types, union types, or generic types instead"
        enabled: true

      - id: "ts-non-null-assertion"
        name: "Non-null assertion operator"
        description: "Non-null assertion operator (!) bypasses type safety and can cause runtime errors."
        category: "bug_risk"
        severity: "warning"
        pattern: "$VAR!"
        message: "Avoid non-null assertion operator"
        suggestion: "Use proper null checking or optional chaining"
        enabled: true

# Custom rule categories
categories:
  security:
    name: "Security"
    description: "Rules that detect potential security vulnerabilities"
    color: "red"

  code_quality:
    name: "Code Quality"
    description: "Rules that improve code maintainability and readability"
    color: "yellow"

  performance:
    name: "Performance"
    description: "Rules that identify performance issues"
    color: "orange"

  best_practice:
    name: "Best Practice"
    description: "Rules that enforce coding best practices"
    color: "blue"

  style:
    name: "Style"
    description: "Rules that enforce consistent code style"
    color: "green"

  bug_risk:
    name: "Bug Risk"
    description: "Rules that identify code patterns likely to cause bugs"
    color: "red"

# Severity levels configuration
severity_levels:
  error:
    name: "Error"
    description: "Critical issues that must be fixed"
    exit_code: 1

  warning:
    name: "Warning"
    description: "Important issues that should be addressed"
    exit_code: 0

  info:
    name: "Info"
    description: "Suggestions for improvement"
    exit_code: 0

  hint:
    name: "Hint"
    description: "Minor suggestions"
    exit_code: 0

# Rule exclusions and inclusions
filters:
  # Exclude certain files or directories
  exclude:
    - "test_*.py"
    - "test_*.rs"
    - "test_*.js"
    - "test_*.ts"
    - "*/tests/*"
    - "*/node_modules/*"
    - "*/target/*"

  # Include only certain file patterns
  include:
    - "*.rs"
    - "*.py"
    - "*.js"
    - "*.ts"
    - "*.jsx"
    - "*.tsx"

# Output formatting options
output:
  format: "detailed"  # detailed, compact, json
  show_suggestions: true
  show_examples: true
  group_by_category: true
  sort_by_severity: true
