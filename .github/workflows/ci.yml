name: CI

on:
  push:
    branches: [ main, develop, feature/** ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      - name: Format check
        run: cargo fmt --all -- --check
        continue-on-error: true

      - name: Clippy
        run: cargo clippy --all-targets
        continue-on-error: true

      - name: Build (all features)
        run: cargo build --all-features

      - name: Test (unit only, lib+bins)
        run: cargo test --lib --bins --all-features -- --nocapture

  feature-matrix:
    name: Feature matrix on ${{ matrix.os }} - ${{ matrix.feature }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        feature: [minimal, ai, security, devops, update-notifier, full]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      - name: Build selected feature
        shell: bash
        run: |
          set -e
          case "${{ matrix.feature }}" in
            minimal)
              cargo build --no-default-features --features minimal;;
            ai)
              cargo build --no-default-features --features "ai,tree-sitter-rust";;
            security)
              cargo build --no-default-features --features security;;
            devops)
              cargo build --no-default-features --features devops;;
            update-notifier)
              cargo build --no-default-features --features update-notifier;;
            full)
              cargo build --features full;;
            *) echo "Unknown feature"; exit 1;;
          esac

      - name: Smoke run --help
        shell: bash
        run: |
          if [ "${{ runner.os }}" = "Windows" ]; then
            target/debug/gitai.exe --help > NUL
          else
            target/debug/gitai --help >/dev/null
          fi

